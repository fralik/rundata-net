#image: ubuntu
python:3.6

# test:
#   script:
#   - apt-get update -qy
#   - apt-get install -y python-dev python-pip
#   - pip install -r requirements/local.txt
#   - python manage.py test

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - ~/.cache/pip/

staging:
  # image per job
  # image: ubuntu
  type: deploy
  before_script:
    # install requirement packages
    - apt-get update -qy
    - apt-get install -y python-dev python-pip
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

    # Run ssh-agent inside the build environment
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_TOKEN" | tr -d '\r' | ssh-add - > /dev/null

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server.
    ## You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    - ssh-keyscan -p $STAGING_PORT $STAGING_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # prepare pull script
    - echo "cd /home/webapps/rundata.info" > ~/pull.sh
    - echo git pull >> ~/.pull.sh

    - pip install -r requirements/production.txt

  script:
    - cd $CI_PROJECT_DIR
    - pwd
    - export DJANGO_SETTINGS_MODULE=config.settings.production
    #- python manage.py collectstatic
    #- ssh -t $STAGING_USER@$STAGING_SERVER -p $STAGING_PORT
    #- ssh -tt $STAGING_USER@$STAGING_SERVER -p $STAGING_PORT 'bash -s ' < ~/pull.sh
    - echo nothing
